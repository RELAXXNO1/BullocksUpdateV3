rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Enhanced admin validation function
    function isAdmin() {
      return request.auth != null && 
             get(/databases/$(database)/documents/admins/$(request.auth.uid)).data().role == 'admin' &&
             request.time > timestamp.date(2023, 1, 1);  // Prevent very old admin tokens
    }

    // Enhanced user validation function
    function isValidUser() {
      return request.auth != null && 
             request.auth.token.email_verified == true;
    }

    // Product images with strict validation
    match /products/{imageId} {
      allow read: if true;  // Public read for product images
      allow create: if isAdmin() &&
                    validateProductImage(request.resource);
      allow update, delete: if isAdmin();

      // Comprehensive image validation function
      function validateProductImage(image) {
        return image.size < 10 * 1024 * 1024 &&  // 10MB max
               image.contentType.matches('image/(jpeg|png|webp)') &&
               image.name.matches('^[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|webp)$');
      }
    }

    // Watermark images (backend-controlled)
    match /watermarks/{imageId} {
      allow read: if isAdmin();
      allow write: if false;  // Strictly backend-controlled
    }

    // User-uploaded images with strict controls
    match /users/{userId}/{fileName} {
      allow read: if isValidUser() && 
                  (request.auth.uid == userId || isAdmin());
      allow create: if isValidUser() && 
                    request.auth.uid == userId &&
                    validateUserImage(request.resource);
      allow delete: if isValidUser() && 
                    request.auth.uid == userId;

      // Comprehensive user image validation
      function validateUserImage(image) {
        return image.size < 5 * 1024 * 1024 &&  // 5MB max
               image.contentType.matches('image/(jpeg|png|webp)') &&
               image.name.matches('^[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|webp)$');
      }
    }

    // Photobank images with strict validation
    match /photos/{category}/{imageId} {
      allow read: if isAdmin();  // Only admins can read photobank images
      allow create: if isAdmin() &&
                    validatePhotobankImage(request.resource);
      allow update, delete: if isAdmin();

      // Comprehensive image validation function
      function validatePhotobankImage(image) {
        return image.size < 10 * 1024 * 1024 &&  // 10MB max
               image.contentType.matches('image/(jpeg|png|webp)') &&
               image.name.matches('^[a-zA-Z0-9_-]+\\.(jpg|jpeg|png|webp)$');
      }
    }

    // Global fallback deny rule
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
